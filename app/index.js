'use strict'; 
// üëâ 'use strict'; ativa o "modo estrito" do JavaScript.
// √â como dizer ao JavaScript: "Seja mais rigoroso comigo!".
// Ele ajuda a pegar erros comuns mais cedo (como usar uma vari√°vel
// sem declar√°-la) e torna o c√≥digo mais seguro. √â uma √≥tima pr√°tica!

// =================================================================================================
// index.js ‚Äî Vers√£o comentada, passo a passo, para iniciantes
// =================================================================================================
//
// O QUE ESTE ARQUIVO FAZ? (A VIS√ÉO GERAL)
//
// 1. Inicia um servidor web (API) usando 'Fastify', um framework Node.js
//    famoso por ser muito r√°pido.
//
// 2. Conecta-se a um banco de dados PostgreSQL. N√≥s usamos o 'pg-native',
//    que √© uma "ponte" direta e mais r√°pida para o Postgres.
//
// 3. Cadastra "fun√ß√µes inteligentes" (chamadas Stored Procedures) dentro
//    do pr√≥prio banco de dados.
//
// 4. Exp√µe duas "rotas" (endpoints) que o mundo exterior pode acessar:
//
//    - GET  /clientes/:id/extrato
//      (Pede ao banco: "Me d√™ o saldo e as 10 √∫ltimas transa√ß√µes deste cliente")
//
//    - POST /clientes/:id/transacoes
//      (Diz ao banco: "Execute esta transa√ß√£o de cr√©dito ou d√©bito para este cliente")
//
// FILOSOFIA DESTA ARQUITETURA (IMPORTANTE!)
//
// Pense no Node.js (este arquivo) como um "recepcionista" muito r√°pido.
// Ele n√£o toma decis√µes de neg√≥cio complicadas.
//
// - O "recepcionista" (Node.js):
//   - Recebe o pedido (a requisi√ß√£o HTTP).
//   - Valida se o "formul√°rio" do pedido est√° preenchido corretamente
//     (ex: o valor √© um n√∫mero? a descri√ß√£o n√£o √© longa demais?).
//   - Se estiver tudo OK, ele passa o pedido para o "gerente" (o banco de dados).
//   - Pega a resposta do "gerente" e a entrega de volta ao cliente.
//
// - O "gerente" (Banco de Dados / PostgreSQL):
//   - Cont√©m as "fun√ß√µes inteligentes" (PL/pgSQL) que n√≥s criamos.
//   - √â ele quem sabe a "regra de neg√≥cio" (ex: "um cliente n√£o pode
//     ficar com saldo mais negativo que seu limite").
//   - Como ele faz tudo l√° dentro, ele √© muito r√°pido e garante que
//     ningu√©m "fure a fila" (evita problemas de concorr√™ncia).
//
// Esta arquitetura √© √≥tima para performance!
// =================================================================================================


/* 1) IMPORTA√á√ïES - AS "FERRAMENTAS" QUE VAMOS USAR */

// Importa o Fastify, nosso "motor" para o servidor web (API).
// { logger: false } desliga os logs autom√°ticos de cada requisi√ß√£o.
// Em produ√ß√£o, isso economiza recursos. Para depurar, mude para 'true'.
const fastify = require('fastify')({ logger: false });

// Importa o cliente de PostgreSQL para Node.js.
// 'native' √© a parte "nativa" do pacote 'pg'.
// Pense assim:
// - A vers√£o normal ('pg') √© escrita 100% em JavaScript.
// - A vers√£o 'native' usa uma "ponte" (libpq) para falar com o Postgres
//   na linguagem C, o que √© (geralmente) mais r√°pido em cen√°rios de alta carga.
const { native } = require('pg');

// O 'Pool' √© uma das ideias mais importantes aqui.
// Conectar ao banco de dados √© uma opera√ß√£o LENTA (demora para "abrir a porta").
// Um "Pool" (Piscina) de Conex√µes √© como um "chaveiro" que mant√©m
// v√°rias "chaves" (conex√µes) j√° prontas.
// Quando precisamos falar com o banco, em vez de criar uma chave nova,
// n√≥s "pegamos uma chave emprestada" do chaveiro.
// Quando terminamos, n√≥s "devolvemos a chave". Isso √© MUITO mais r√°pido.
const Pool = native.Pool;


/* 2) CONFIGURA√á√ÉO DO POOL (O "CHAVEIRO" DE CONEX√ïES) */

// 'process.env' √© como o Node.js l√™ "Vari√°veis de Ambiente".
// Pense nelas como "configura√ß√µes" passadas de fora (ex: pelo Docker Compose).
// Aqui, definimos o n√∫mero m√°ximo de "chaves" no nosso chaveiro.
// Se a vari√°vel 'PG_MAX' n√£o for definida, usamos 30 como padr√£o.
const PG_MAX = Number(process.env.PG_MAX ?? 30);

// Criamos a inst√¢ncia do nosso "chaveiro" (o Pool).
const pool = new Pool({
    // As credenciais para acessar o banco, lidas das vari√°veis de ambiente.
    host: process.env.DB_HOST,       // O endere√ßo do servidor do banco (ex: 'postgres')
    user: process.env.DB_USER,       // O nome de usu√°rio
    password: process.env.DB_PASSWORD, // A senha
    database: process.env.DB_DATABASE, // O nome do banco de dados espec√≠fico

    // Configura√ß√µes do "chaveiro":
    max: PG_MAX,                     // Quantas "chaves" (conex√µes) no m√°ximo
    min: 5,
    idleTimeoutMillis: 20000,        // Se uma "chave" ficar 20s sem uso, ela √© "reciclada"
});

// Ajustes finos no servidor HTTP do Fastify.
fastify.after(() => {
    // 'keepAliveTimeout' √© quanto tempo o servidor espera por um novo
    // pedido do *mesmo cliente* na *mesma conex√£o* HTTP.
    // 60 segundos √© um valor alto, bom para load balancers.
    fastify.server.keepAliveTimeout = 60000; // 60 segundos
});


/* 3) SQL DE INICIALIZA√á√ÉO (A "FUNDA√á√ÉO" DO NOSSO BANCO) */

// Por que rodar isso quando a aplica√ß√£o inicia?
// Para garantir que a "funda√ß√£o" (√≠ndices e fun√ß√µes) do nosso banco
// esteja exatamente como esperamos, antes de qualquer cliente usar a API.

// --- O √çNDICE ---
// Pense em um √≠ndice de banco de dados como o √≠ndice de um livro.
// Sem √≠ndice, para achar um t√≥pico, voc√™ teria que ler todas as p√°ginas.
// Com √≠ndice, voc√™ vai direto para a p√°gina certa.
const CREATE_INDEX_SQL = `
CREATE INDEX IF NOT EXISTS idx_account_id_id_desc ON transactions (account_id, id DESC);
`;
// O que isso faz?
// "IF NOT EXISTS": N√£o d√° erro se o √≠ndice j√° existir.
// "ON transactions (account_id, id DESC)":
//   Cria um √≠ndice na tabela 'transactions' para acelerar buscas
//   filtrando por 'account_id' (um cliente) e ordenando por 'id DESC'
//   (da transa√ß√£o mais recente para a mais antiga).
//   Perfeito para a nossa rota de "extrato"!

// --- A FUN√á√ÉO DE BUSCAR EXTRATO ---
// 'PL/pgSQL' √© uma linguagem que permite "programar" dentro do Postgres.
// Estamos criando uma "fun√ß√£o inteligente" no banco.
const CREATE_EXTRACT_FUNCTION_SQL = `
CREATE OR REPLACE FUNCTION get_extrato(p_account_id INT)
RETURNS JSON AS $$
DECLARE
    account_info JSON;
    last_transactions JSON;
BEGIN
    -- 1. Busca as informa√ß√µes da conta (saldo, limite)
    --    e j√° formata como um objeto JSON.
    SELECT json_build_object(
        'total', balance,
        'limite', account_limit,
        'data_extrato', NOW()
    )
    INTO account_info
    FROM accounts
    WHERE id = p_account_id;

    -- 2. Se a conta n√£o existir, 'account_info' ser√° NULL.
    --    Nesse caso, paramos e retornamos NULL.
    IF account_info IS NULL THEN
        RETURN NULL;
    END IF;

    -- 3. Busca as 10 √∫ltimas transa√ß√µes e j√° as formata
    --    como um array JSON (usando 'json_agg').
    --    (Usamos o √≠ndice que criamos l√° em cima!)
    SELECT json_agg(t_info)
    INTO last_transactions
    FROM (
        SELECT json_build_object(
            'valor', amount,
            'tipo', type,
            'descricao', description,
            'realizada_em', created_at
        ) as t_info
        FROM transactions
        WHERE account_id = p_account_id
        ORDER BY id DESC
        LIMIT 10
    ) sub;

    -- 4. Junta tudo em um √∫nico JSON de resposta.
    --    COALESCE(..., '[]'::json) √© um truque para retornar um array
    --    vazio '[]' em vez de 'NULL' se o cliente n√£o tiver transa√ß√µes.
    RETURN json_build_object(
        'saldo', account_info,
        'ultimas_transacoes', COALESCE(last_transactions, '[]'::json)
    );
END;
$$ LANGUAGE plpgsql;
`;
// VANTAGEM: O Node.js n√£o precisa fazer duas queries separadas e
// "montar o quebra-cabe√ßa". O banco j√° entrega o JSON pronto!

// --- A FUN√á√ÉO DE PROCESSAR TRANSA√á√ÉO ---
// Esta √© a fun√ß√£o mais importante. Ela √© o "c√©rebro" do neg√≥cio.
const CREATE_TRANSACTION_FUNCTION_SQL = `
CREATE OR REPLACE FUNCTION process_transaction(
    p_account_id INT,
    p_amount INT,
    p_type CHAR,
    p_description VARCHAR(10)
)
RETURNS JSON AS $$
DECLARE
    response JSON;
BEGIN
    -- O 'WITH' (Common Table Expressions) nos permite criar "passos"
    -- que rodam em sequ√™ncia.

    -- PASSO 1: Tentar ATUALIZAR o saldo da conta.
    WITH updated_account AS (
        UPDATE accounts
        -- L√≥gica de soma/subtra√ß√£o
        SET balance = balance + CASE WHEN p_type = 'c' THEN p_amount ELSE -p_amount END
        
        -- AQUI EST√Å A REGRA DE NEG√ìCIO CR√çTICA:
        WHERE id = p_account_id AND (
            p_type = 'c' OR -- Se for cr√©dito ('c'), permite sempre.
            (balance - p_amount) >= -account_limit -- Se for d√©bito ('d'), S√ì permite
                                                   -- se o novo saldo N√ÉO estourar o limite.
        )
        -- 'RETURNING' nos devolve os dados da linha que *acabou* de ser atualizada.
        RETURNING balance, account_limit
    ),
    -- PASSO 2: INSERIR a transa√ß√£o.
    inserted_transaction AS (
        -- Este INSERT S√ì VAI ACONTECER se o 'WITH updated_account'
        -- (Passo 1) tiver encontrado e atualizado uma linha.
        -- Se a conta n√£o existiu ou se o limite estourou, o Passo 1
        -- n√£o atualiza nada, e este INSERT √© pulado.
        INSERT INTO transactions (account_id, amount, type, description)
        SELECT p_account_id, p_amount, p_type, p_description
        FROM updated_account -- A "m√°gica" est√° aqui!
        RETURNING 1
    )
    -- PASSO 3: Preparar a resposta.
    -- (Isto tamb√©m s√≥ funciona se o 'updated_account' (Passo 1) funcionou)
    SELECT json_build_object('saldo', ua.balance, 'limite', ua.account_limit)
    INTO response
    FROM updated_account ua;

    -- Se 'response' for NULL, significa que o Passo 1 falhou
    -- (conta n√£o existe ou limite estourou).
    IF response IS NULL THEN
        -- Retornamos um JSON de erro. O Node.js vai ler isso
        -- e saber que deve retornar um erro 422.
        RETURN '{"error": 1}'::json;
    END IF;

    -- Se deu tudo certo, 'response' cont√©m o novo saldo e limite.
    RETURN response;
END;
$$ LANGUAGE plpgsql;
`;
// VANTAGEM: Esta fun√ß√£o √© "AT√îMICA" (Tudo ou Nada).
// Ou ela atualiza o saldo E insere a transa√ß√£o, ou ela n√£o faz NADA.
// √â imposs√≠vel ficar em um estado "estranho" (ex: inserir a transa√ß√£o
// mas n√£o atualizar o saldo). Fazer isso no banco √© a forma mais
// segura de garantir consist√™ncia.


/* 4) ESQUEMA DE RESPOSTA (UMA OTIMIZA√á√ÉO DO FASTIFY) */

// O que √© isso?
// √â um "molde" que diz ao Fastify exatamente como a resposta JSON
// da rota de transa√ß√£o deve se parecer.
//
// Por que usar?
// O Fastify usa uma biblioteca super r√°pida (fast-json-stringify)
// que pr√©-compila uma fun√ß√£o para transformar objetos JS em JSON.
// Se ele sabe o "molde" de antem√£o, ele consegue fazer isso
// de forma muito mais r√°pida do que o 'JSON.stringify()' padr√£o.
// Isso reduz o trabalho de "limpeza de mem√≥ria" (Garbage Collector).
const transactionReplySchema = {
    schema: {
        response: {
            // Se o status for 200 (OK), a resposta DEVE ser
            // um objeto com 'limite' e 'saldo'.
            200: {
                type: 'object',
                properties: {
                    limite: { type: 'integer' },
                    saldo: { type: 'integer' },
                }
            }
        }
    }
};


/* 5) ROTA: GET /clientes/:id/extrato */
// ':id' √© um par√¢metro din√¢mico na URL.

// 'async (request, reply)' √© como o Fastify lida com rotas.
// 'request' tem os dados do pedido (par√¢metros, body, headers).
// 'reply' √© o objeto que usamos para enviar a resposta.
// 'async' nos permite usar 'await' para esperar opera√ß√µes
// demoradas (como falar com o banco).
fastify.get('/clientes/:id/extrato', async (request, reply) => {
    // request.params.id vem da URL (ex: /clientes/3 -> id √© "3")
    // Par√¢metros de URL s√£o sempre strings, ent√£o convertemos para n√∫mero.
    const id = Number(request.params.id);

    // --- VALIDA√á√ÉO "BARATA" (ANTES DE IR AO BANCO) ---
    // Checamos se o 'id' √© um n√∫mero inteiro v√°lido (1 a 5,
    // conforme regra de neg√≥cio deste projeto).
    // Por que 1 a 5? √â uma regra espec√≠fica deste desafio de performance.
    // √â uma "valida√ß√£o de sanidade" antes de gastar tempo de banco.
    if (!Number.isInteger(id) || id <= 0 || id > 5) {
        // Se for inv√°lido, retornamos 404 (N√£o Encontrado).
        // N√£o adianta nem procurar no banco.
        return reply.code(404).send();
    }

    let client; // Vari√°vel para guardar a "chave" (conex√£o) do pool
    try {
        // --- Pegando a "chave" ---
        // 'await pool.connect()' pausa a fun√ß√£o at√© que o "chaveiro"
        // nos entregue uma conex√£o livre.
        client = await pool.connect();

        // --- Executando a Query ---
        // Usamos um "Prepared Statement" (name/text/values).
        // Isso √© CRUCIAL para seguran√ßa e performance.
        // - Seguran√ßa: Os 'values' (par√¢metros) s√£o enviados separados
        //   do 'text' (SQL), impedindo "SQL Injection".
        // - Performance: 'name: 'get-extrato'' diz ao Postgres: "Ei,
        //   lembre-se desta query. Se eu cham√°-la de novo, voc√™
        //   j√° sabe o plano de execu√ß√£o, s√≥ mude os valores."
        const result = await client.query({
            name: 'get-extrato',
            text: 'SELECT get_extrato($1) as extrato_json',
            values: [id] // $1 ser√° substitu√≠do por 'id' de forma segura
        });

        // Pegamos o resultado. Nossa fun√ß√£o retorna uma linha,
        // com uma coluna 'extrato_json' que j√° cont√©m o JSON pronto.
        const extrato = result.rows[0].extrato_json;
        
        if (extrato === null) {
            // A fun√ß√£o do banco retornou NULL (conta n√£o existe).
            return reply.code(404).send();
        }
        
        // Sucesso! Enviamos o JSON que o banco nos deu.
        return reply.send(extrato);

    } catch (e) {
        // Se qualquer coisa der errado (ex: o banco caiu),
        // ca√≠mos no 'catch'.
        console.error("Erro no GET /extrato:", e);
        return reply.code(500).send(); // 500 = Erro Interno do Servidor

    } finally {
        // --- Devolvendo a "chave" ---
        // O bloco 'finally' SEMPRE executa, dando certo ou errado.
        // √â CR√çTICO "devolver a chave" (conex√£o) para o "chaveiro" (pool).
        // Se esquecermos isso, as conex√µes v√£o acabar (vazamento de pool)
        // e a aplica√ß√£o vai "congelar".
        if (client) client.release();
    }
});


/* 6) ROTA: POST /clientes/:id/transacoes */
// (Usamos 'transactionReplySchema' para otimizar a resposta)
fastify.post('/clientes/:id/transacoes', transactionReplySchema, async (request, reply) => {
    const id = Number(request.params.id);
    // 'request.body' √© o JSON que o cliente enviou.
    // '?? {}' √© um truque: se 'request.body' for nulo,
    // usamos um objeto vazio '{}' para evitar erros.
    const { valor, tipo, descricao } = request.body ?? {};

    // --- VALIDA√á√ÉO "BARATA" (ANTES DE IR AO BANCO) ---
    // Esta √© a valida√ß√£o do "formul√°rio" do nosso "recepcionista".
    // Verificamos se todos os campos vieram corretos.
    if (
        !Number.isInteger(id) || id <= 0 || id > 5 ||         // id v√°lido (1..5)
        !Number.isInteger(valor) || valor <= 0 ||            // "valor" precisa ser inteiro e positivo
        (tipo !== 'c' && tipo !== 'd') ||                    // "tipo" s√≥ pode ser 'c' ou 'd'
        !descricao || typeof descricao !== 'string' ||       // "descricao" precisa existir e ser string
        descricao.length === 0 || descricao.length > 10      // "descricao" precisa ter de 1 a 10 chars
    ) {
        // 422 (Unprocessable Entity):
        // √â o c√≥digo HTTP para dizer: "Eu entendi seu pedido, mas
        // os dados que voc√™ me enviou (o 'body') est√£o errados
        // ou incompletos. N√£o posso processar."
        return reply.code(422).send();
    }

    let client;
    try {
        // Pegamos uma "chave" (conex√£o) do "chaveiro" (pool).
        client = await pool.connect();

        // --- Chamando o "Gerente" (a fun√ß√£o do banco) ---
        // N√≥s n√£o fazemos UPDATE ou INSERT aqui no Node.
        // N√≥s apenas chamamos a fun√ß√£o 'process_transaction' que
        // criamos, e ela faz todo o trabalho pesado e seguro.
        const result = await client.query({
            name: 'process-transaction', // Reusa o plano de execu√ß√£o
            text: 'SELECT process_transaction($1, $2, $3, $4) as response_json',
            values: [id, valor, tipo, descricao] // Passa os dados
        });

        const response = result.rows[0].response_json;

        // Agora, verificamos a resposta do "gerente".
        if (response.error) {
            // A fun√ß√£o do banco nos disse que deu erro (ex: limite estourado).
            // O banco j√° garantiu que NADA foi alterado (atomicidade).
            // N√≥s apenas repassamos o erro 422.
            return reply.code(422).send();
        }

        // Sucesso! A transa√ß√£o foi feita.
        // A 'response' j√° cont√©m o JSON { limite, saldo }
        // que o banco nos mandou. O Fastify vai otimizar
        // o envio disso gra√ßas ao nosso 'transactionReplySchema'.
        return reply.send(response);

    } catch (e) {
        // Erro inesperado (banco caiu, etc.)
        console.error("Erro no POST /transacoes:", e);
        return reply.code(500).send();
    } finally {
        // CR√çTICO: Devolver a "chave" (conex√£o) ao "chaveiro" (pool).
        if (client) client.release();
    }
});


/* 7) INICIALIZA√á√ÉO DO SERVIDOR */

// Criamos uma fun√ß√£o 'async' para poder usar 'await' nela.
const start = async () => {
    try {
        // --- 1. Preparar o Banco ---
        // Antes de qualquer coisa, vamos pegar UMA conex√£o
        // para rodar nossa "funda√ß√£o" (SQLs de inicializa√ß√£o).
        const client = await pool.connect();
        console.log("Conectado ao banco de dados, preparando fun√ß√µes e √≠ndices...");

        // Rodamos os SQLs que definimos l√° em cima.
        // 'IF NOT EXISTS' e 'OR REPLACE' garantem que isso
        // pode rodar v√°rias vezes sem dar erro.
        await client.query(CREATE_INDEX_SQL);
        await client.query(CREATE_EXTRACT_FUNCTION_SQL);
        await client.query(CREATE_TRANSACTION_FUNCTION_SQL);

        // Devolvemos a conex√£o de setup.
        client.release();
        console.log("Banco de dados pronto.");

        // --- 2. Iniciar o Servidor Web ---
        // S√≥ depois que o banco est√° PRONTO √© que come√ßamos
        // a "abrir a loja" (aceitar requisi√ß√µes HTTP).
        const port = Number(process.env.PORT) || 3000;

        // 'host: '0.0.0.0'' √© importante.
        // Significa "escute em todas as interfaces de rede".
        // Em um container Docker, isso √© essencial para que o
        // mundo exterior (o Nginx, por exemplo) possa se conectar.
        // Se us√°ssemos 'localhost' (127.0.0.1), ele s√≥ aceitaria
        // conex√µes de *dentro* do pr√≥prio container.
        await fastify.listen({ port, host: '0.0.0.0' });
        
        console.log(`Servidor "recepcionista" rodando na porta ${port}`);

    } catch (err) {
        // Se algo der errado na INICIALIZA√á√ÉO (ex: n√£o conseguiu
        // conectar no banco de jeito nenhum), n√£o h√° o que fazer.
        console.error("Erro fatal ao iniciar a aplica√ß√£o:", err);
        // 'process.exit(1)' encerra o programa com um c√≥digo de erro.
        // Isso sinaliza ao Docker (ou outro orquestrador) que
        // a aplica√ß√£o falhou em iniciar e precisa ser reiniciada.
        process.exit(1);
    }
};

// Finalmente, chamamos a fun√ß√£o 'start' para ligar tudo.
start();